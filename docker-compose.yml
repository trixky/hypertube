version: "3.8"
services:
  api-auth:
    build: ./api-auth
    env_file:
      - ./api-auth/.env
      - ./postgres/.env
    volumes:
      - ./api-auth:/app
    depends_on:
      - postgres
      - redis
    links:
      - postgres
      - redis
    ports:
      - "${API_AUTH_GRPC_PORT}:${API_AUTH_GRPC_PORT}"
      - "${API_AUTH_GRPC_GATEWAY_PORT}:${API_AUTH_GRPC_GATEWAY_PORT}"
      - "${API_AUTH_HTTP_PORT}:${API_AUTH_HTTP_PORT}"

    # access to the server:
    # $> docker-compose exec server sh

  api-user:
    build: ./api-user
    env_file:
      - ./api-user/.env
      - ./postgres/.env
    volumes:
      - ./api-user:/app
    depends_on:
      - postgres
      - redis
    links:
      - postgres
      - redis
    ports:
      - "${API_USER_GRPC_PORT}:${API_USER_GRPC_PORT}"
      - "${API_USER_GRPC_GATEWAY_PORT}:${API_USER_GRPC_GATEWAY_PORT}"
      - "${API_USER_HTTP_PORT}:${API_USER_HTTP_PORT}"

    # access to the server:
    # $> docker-compose exec server sh

  api-streaming:
    build: ./api-streaming
    env_file:
      - ./api-streaming/.env
    volumes:
      - ./api-streaming:/usr/src/app
    # depends_on:
      # - ...
    links:
      - client
    ports:
      - "${API_STREAMING_PORT}:${API_STREAMING_PORT}"
  
  postgres:
    image: postgres
    restart: always
    env_file:
      - ./postgres/.env
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql

    # access to the psql CLI:
    # $> docker-compose exec postgres psql

  redis:
    image: redis:7.0.2-alpine
    volumes:
      - redis-data:/data

    # access to the redis CLI:
    # $> docker exec -it <container> /bin/sh -c 'redis-cli -h redis'

  # pgadmin:
  #   image: dpage/pgadmin4
  #   env_file:
  #     - ./pg-admin/.env
  #   depends_on:
  #     - postgres
  #   ports:
  #     - "5050:80"
  #   restart: unless-stopped
  #   links:
  #     - postgres
  #   volumes:
  #     - pgadmin-data:/var/lib/pgadmin

  adminer:
    image: adminer
    depends_on:
      - postgres
    ports:
      - 5050:8080
    restart: unless-stopped
    links:
      - postgres
  
  client:
    build: ./client
    env_file:
      - ./client/.env
      - ./api-auth/.env
    volumes:
      - ./client:/app
    depends_on:
      - api-auth
    links:
      - api-auth
    ports:
      - "${CLIENT_PORT}:${CLIENT_PORT}"

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  pgadmin-data:
    driver: local
