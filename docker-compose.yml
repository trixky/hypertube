version: "3.8"
services:
  api-auth:
    build: ./api-auth
    env_file:
      - ./api-auth/.env
      - ./postgres/.env
    volumes:
      - ./api-auth:/app
    depends_on:
      - postgres
      - redis
    links:
      - postgres
      - redis
    ports:
      - "${API_AUTH_GRPC_PORT}:${API_AUTH_GRPC_PORT}"
      - "${API_AUTH_GRPC_GATEWAY_PORT}:${API_AUTH_GRPC_GATEWAY_PORT}"
      - "${API_AUTH_HTTP_PORT}:${API_AUTH_HTTP_PORT}"

  api-user:
    build: ./api-user
    env_file:
      - ./api-user/.env
      - ./postgres/.env
    volumes:
      - ./api-user:/app
    depends_on:
      - postgres
      - redis
    links:
      - postgres
      - redis
    ports:
      - "${API_USER_GRPC_PORT}:${API_USER_GRPC_PORT}"
      - "${API_USER_GRPC_GATEWAY_PORT}:${API_USER_GRPC_GATEWAY_PORT}"
      - "${API_USER_HTTP_PORT}:${API_USER_HTTP_PORT}"
    # access to the server:
    # $> docker-compose exec server sh

  api-scrapper:
    build: ./api-scrapper
    env_file:
      - ./api-scrapper/.env
      - ./postgres/.env
    volumes:
      - ./api-scrapper:/app
    depends_on:
      - postgres
    links:
      - postgres
    ports:
      - "${API_SCRAPPER_GRPC_PORT}:${API_SCRAPPER_GRPC_PORT}"

  api-media:
    build: ./api-media
    env_file:
      - ./api-scrapper/.env
      - ./api-media/.env
      - ./postgres/.env
    volumes:
      - ./api-media:/app
    depends_on:
      - postgres
      - api-scrapper
      - redis
    links:
      - postgres
      - api-scrapper
      - redis
    ports:
      - "${API_SEARCH_GRPC_PORT}:${API_SEARCH_GRPC_PORT}"
      - "${API_SEARCH_GRPC_GATEWAY_PORT}:${API_SEARCH_GRPC_GATEWAY_PORT}"

  api-streaming:
    build: ./api-streaming
    env_file:
      - ./api-streaming/.env
    volumes:
      - ./api-streaming:/usr/src/app
      # - streaming-node-modules:/app/node_modules
    depends_on:
      - postgres
    links:
      - client
      - postgres
    ports:
      - "${API_STREAMING_PORT}:${API_STREAMING_PORT}"

  api-position:
    build: ./api-position
    env_file:
      - ./api-position/.env
    volumes:
      - ./api-position:/usr/src/app
      # - position-node-modules:/app/node_modules
    depends_on:
      - postgres
      - redis
    links:
      - client
      - postgres
      - redis
    ports:
      - "${API_POSITION_PORT}:${API_POSITION_PORT}"

  api-tester:
    build: ./api-tester
    env_file:
      - ./client/.env
      - ./api-auth/.env
      - ./api-user/.env
      - ./api-position/.env
      - ./redis/.env
    volumes:
      - ./api-tester:/app
    depends_on:
      - client
      - api-auth
      - api-user
      - api-position
      - redis
    links:
      - client
      - api-auth
      - api-user
      - api-position
      - redis

  postgres:
    image: postgres
    restart: always
    env_file:
      - ./postgres/.env
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    # access to the psql CLI:
    # $> docker-compose exec postgres psql

  redis:
    image: redis:7.0.2-alpine
    env_file:
      - ./redis/.env
    volumes:
      - redis-data:/data
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
      # access to the redis CLI:
      # $> dc exec -it redis /bin/sh -c 'redis-cli -h redis'

  adminer:
    image: adminer:4.8.1-standalone
    depends_on:
      - postgres
    ports:
      - 5050:8080
    restart: unless-stopped
    links:
      - postgres

  tmdb-proxy:
    image: nginx:1.23-alpine
    env_file:
      - ./tmdb-proxy/.env
    volumes:
      - ./tmdb-proxy/nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx-proxy-data:/var/www/cache
    ports:
      - "${TMDB_PROXY_PORT}:80"

  client:
    build: ./client
    env_file:
      - ./client/.env
      - ./api-auth/.env
    volumes:
      - ./client:/app
      - client-node-modules:/app/node_modules
    depends_on:
      - api-auth
      - api-media
    links:
      - api-auth
      - api-media
      - tmdb-proxy
    ports:
      - "${CLIENT_PORT}:${CLIENT_PORT}"

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  nginx-proxy-data:
    driver: local
  # streaming-node-modules:
  #   driver: local
  client-node-modules:
    driver: local
