version: "3.8"
services:
  api-auth:
    build: ./api-auth
    env_file:
      - ./api-auth/.env
      - ./postgres/.env
    volumes:
      - ./api-auth:/app
    depends_on:
      - postgres
      - redis
    links:
      - postgres
      - redis
    ports:
      - "${API_AUTH_GRPC_PORT}:${API_AUTH_GRPC_PORT}"
      - "${API_AUTH_GRPC_GATEWAY_PORT}:${API_AUTH_GRPC_GATEWAY_PORT}"
      - "${API_AUTH_HTTP_PORT}:${API_AUTH_HTTP_PORT}"

  api-scrapper:
    build: ./api-scrapper
    env_file:
      - ./api-scrapper/.env
      - ./postgres/.env
    volumes:
      - ./api-scrapper:/app
    depends_on:
      - postgres
    links:
      - postgres
    ports:
      - "${API_SCRAPPER_GRPC_PORT}:${API_SCRAPPER_GRPC_PORT}"
      - "${API_SCRAPPER_GRPC_GATEWAY_PORT}:${API_SCRAPPER_GRPC_GATEWAY_PORT}"

  api-search:
    build: ./api-search
    env_file:
      - ./api-search/.env
      - ./postgres/.env
    volumes:
      - ./api-search:/app
    depends_on:
      - postgres
    links:
      - postgres
    ports:
      - "${API_SEARCH_GRPC_PORT}:${API_SEARCH_GRPC_PORT}"
      - "${API_SEARCH_GRPC_GATEWAY_PORT}:${API_SEARCH_GRPC_GATEWAY_PORT}"

  postgres:
    image: postgres
    restart: always
    env_file:
      - ./postgres/.env
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    # access to the psql CLI:
    # $> docker-compose exec postgres psql

  redis:
    image: redis:7.0.2-alpine
    volumes:
      - redis-data:/data
    # access to the redis CLI:
    # $> docker exec -it <container> /bin/sh -c 'redis-cli -h redis'

  pgadmin:
    image: dpage/pgadmin4
    env_file:
      - ./pg-admin/.env
    depends_on:
      - postgres
    ports:
      - "5050:80"
    restart: unless-stopped
    links:
      - postgres
    volumes:
      - pgadmin-data:/var/lib/pgadmin

  tmdb-proxy:
    build: ./tmdb-proxy
    env_file:
      - ./tmdb-proxy/.env
    volumes:
      - ./tmdb-proxy/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "${TMDB_PROXY_PORT}:80"

  client:
    build: ./client
    env_file:
      - ./client/.env
      - ./api-auth/.env
    volumes:
      - ./client:/app
    depends_on:
      - api-auth
      - api-search
    links:
      - api-auth
      - api-search
      - tmdb-proxy
    ports:
      - "${CLIENT_PORT}:${CLIENT_PORT}"

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  pgadmin-data:
    driver: local
