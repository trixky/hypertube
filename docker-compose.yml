version: "3.8"
services:
  api-auth:
    build: ./api-auth
    env_file:
      - ./api-auth/.env
      - ./postgres/.env
    volumes:
      - ./api-auth:/app
    depends_on:
      - postgres
    links:
      - postgres
    ports:
      - "${API_AUTH_PORT}:${API_AUTH_PORT}"

  api-scrapper:
    build: ./api-scrapper
    env_file:
      - ./api-scrapper/.env
      - ./postgres/.env
    volumes:
      - ./api-scrapper:/app
    depends_on:
      - postgres
    links:
      - postgres
    ports:
      - "${API_SCRAPPER_PORT}:${API_SCRAPPER_PORT}"

    # access to the server:
    # $> docker-compose exec server sh
  
  postgres:
    image: postgres
    restart: always
    env_file:
      - ./postgres/.env
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql

    # access to the psql CLI:
    # $> docker-compose exec postgres psql

  pgadmin:
    image: dpage/pgadmin4
    env_file:
      - ./pg-admin/.env
    depends_on:
      - postgres
    ports:
      - "5050:80"
    restart: unless-stopped
    links:
      - postgres
    volumes:
      - pgadmin-data:/var/lib/pgadmin
  
  client:
    build: ./client
    env_file:
      - ./client/.env
      - ./api-auth/.env
    volumes:
      - ./client:/app
    depends_on:
      - api-auth
    links:
      - api-auth
    ports:
      - "${CLIENT_PORT}:${CLIENT_PORT}"

volumes:
  postgres-data:
    driver: local
  pgadmin-data:
    driver: local
