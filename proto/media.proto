syntax = "proto3";

option go_package = "./proto";

package media;

import "google/api/annotations.proto";

enum MediaCategory {
	CATEGORY_UNSPECIFIED = 0;
	CATEGORY_MOVIE = 1;
	CATEGORY_SERIE = 2;
}

message MediaName {
	string lang = 1;
	string title = 2;
}

message Media {
	uint32 id = 1;
	media.MediaCategory type = 2;
	string description = 3;
	uint32 year = 4;
	repeated MediaName names = 5;
	repeated string genres = 6;
	optional int32 duration = 7;
	optional string thumbnail = 8;
	optional string background = 9;
	optional float rating = 10;
}

message SearchRequest {
	repeated int32 genre_ids = 1;
    optional string query = 2;
	optional uint32 page = 3;
    optional media.MediaCategory category = 4;
	optional string sort_by = 5;
	optional string sort_order = 6;
	optional uint32 year = 7;
	optional float rating = 8;
}

message SearchResponse {
	uint32 page = 1;
	uint32 results = 2;
	uint32 total_results = 3;
	repeated media.Media medias = 4;
}

message GetRequest {
	uint64 id = 1;
}

message Staff {
	int32 id = 1;
	string name = 2;
	string role = 3;
	string thumbnail = 4;
}

message Actor {
	int32 id = 1;
	string name = 2;
	string character = 3;
	string thumbnail = 4;
}

message TorrentPublicInformations {
	int32 id = 1;
	string name = 2;
	optional int32 seed = 3;
	optional int32 leech = 4;
	optional string size = 5;
}

message GetResponse {
	media.Media media = 1;
	repeated TorrentPublicInformations torrents = 2;
	repeated Staff staffs = 3;
	repeated Actor actors = 4;
}

message GenresRequest {
}

message Genre {
	int32 id = 1;
	string name = 2;
}

message GenresResponse {
	repeated Genre genres = 1;
}

message RefreshMediaRequest {
	uint64 media_id = 1;
}

message RefreshMediaResponse {
	uint32 torrent_id = 1;
	int32 seed = 2;
	int32 leech = 3;
}

service MediaService {
    rpc Search(SearchRequest) returns (SearchResponse) {
        option (google.api.http) = {
            get: "/v1/media/search"
        };
	};
    rpc Genres(GenresRequest) returns (GenresResponse) {
        option (google.api.http) = {
            get: "/v1/media/genres"
        };
	};
    rpc Get(GetRequest) returns (GetResponse) {
        option (google.api.http) = {
            get: "/v1/media/{id}/get"
        };
	};
	rpc Refresh(RefreshMediaRequest) returns (stream RefreshMediaResponse) {
        option (google.api.http) = {
            get: "/v1/media/{media_id}/refresh"
        };
	}
}
