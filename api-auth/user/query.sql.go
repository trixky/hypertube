// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package sqlc

import (
	"context"
	"database/sql"
)

const create42ExternalUser = `-- name: Create42ExternalUser :one
INSERT INTO users (
    username, firstname, lastname, email, password, id_42
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, username, firstname, lastname, email, id_42, password
`

type Create42ExternalUserParams struct {
	Username  string
	Firstname string
	Lastname  string
	Email     string
	Password  sql.NullString
	ID42      sql.NullInt32
}

func (q *Queries) Create42ExternalUser(ctx context.Context, arg Create42ExternalUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, create42ExternalUser,
		arg.Username,
		arg.Firstname,
		arg.Lastname,
		arg.Email,
		arg.Password,
		arg.ID42,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Firstname,
		&i.Lastname,
		&i.Email,
		&i.ID42,
		&i.Password,
	)
	return i, err
}

const createInternalUser = `-- name: CreateInternalUser :one
INSERT INTO users (
    username, firstname, lastname, email, password
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, username, firstname, lastname, email, id_42, password
`

type CreateInternalUserParams struct {
	Username  string
	Firstname string
	Lastname  string
	Email     string
	Password  sql.NullString
}

func (q *Queries) CreateInternalUser(ctx context.Context, arg CreateInternalUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createInternalUser,
		arg.Username,
		arg.Firstname,
		arg.Lastname,
		arg.Email,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Firstname,
		&i.Lastname,
		&i.Email,
		&i.ID42,
		&i.Password,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getInternalUserByCredentials = `-- name: GetInternalUserByCredentials :one
SELECT id, username, firstname, lastname, email, id_42, password FROM users
WHERE email = $1 
AND password = $2
AND id_42 IS NULL
LIMIT 1
`

type GetInternalUserByCredentialsParams struct {
	Email    string
	Password sql.NullString
}

func (q *Queries) GetInternalUserByCredentials(ctx context.Context, arg GetInternalUserByCredentialsParams) (User, error) {
	row := q.db.QueryRowContext(ctx, getInternalUserByCredentials, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Firstname,
		&i.Lastname,
		&i.Email,
		&i.ID42,
		&i.Password,
	)
	return i, err
}

const getUserBy42Id = `-- name: GetUserBy42Id :one
SELECT id, username, firstname, lastname, email, id_42, password FROM users
WHERE id_42 = $1 LIMIT 1
`

func (q *Queries) GetUserBy42Id(ctx context.Context, id42 sql.NullInt32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserBy42Id, id42)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Firstname,
		&i.Lastname,
		&i.Email,
		&i.ID42,
		&i.Password,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, username, firstname, lastname, email, id_42, password FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Firstname,
		&i.Lastname,
		&i.Email,
		&i.ID42,
		&i.Password,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, firstname, lastname, email, id_42, password FROM users
ORDER BY username
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Firstname,
			&i.Lastname,
			&i.Email,
			&i.ID42,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
set username = $2,
firstname = $3,
lastname = $4,
email = $5,
password = $6
WHERE id = $1
AND id_42 IS NULL
`

type UpdateUserParams struct {
	ID        int64
	Username  string
	Firstname string
	Lastname  string
	Email     string
	Password  sql.NullString
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.ID,
		arg.Username,
		arg.Firstname,
		arg.Lastname,
		arg.Email,
		arg.Password,
	)
	return err
}
